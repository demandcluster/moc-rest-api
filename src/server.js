const path = require('path');
const schema  = require('../schemas/index.js'); // a GraphQLSchema object
const GraphQL2REST = require('graphql2rest');
const env = require("../config.js");
const chalk = require("chalk");
const { execute, makePromise } = require('apollo-link');
const { createHttpLink } = require('apollo-link-http');
const fetch = require('node-fetch');
const log = console.log;
const express = require('express');
// uncomment in case you have direct SSL (not proxy from cloudflare)
//require('https').globalAgent.options.ca = require('ssl-root-cas').create();
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';


const server = ()=>{
const app = express();

const gqlServerUri = env.GRAPHQL_URL; // our existing remote GraphQL server

const link = createHttpLink({ uri: gqlServerUri, fetch });

/* GraphQL2REST execute function using apollo-link. Invokes GraphQL operation against gqlServerUri via node-fetch */
const executeGqlLink = (operation) => {
      return makePromise(execute(link, operation));
};

const GQL_FILES_FOLDER = path.resolve(__dirname,'./gqlFilesFolder'); // folder previously generated by generateGqlQueryFiles()

const gql2restOptions = {
	apiPrefix: env.PREFIX, //sets the API base path url
	manifestFile: path.resolve(__dirname,'../manifest.json'), //pathname of manifest file. Default is ./manifest.json
	gqlGeneratorOutputFolder: GQL_FILES_FOLDER,  //.gql files folder
  depthLimitArg: 2 // max depth of query
};

const restRouter = GraphQL2REST.init(schema, executeGqlLink, gql2restOptions);

// restRouter now has our REST API attached
app.use('/', restRouter);

app.listen(
     env.PORT,
     log(chalk.yellow(`DemandCluster MOC REST`)),
     log(
       chalk.green(
         `API Server running in ${env.NODE_ENV} mode on port ${env.PORT}`
       )
     )
  );
  process.on('uncaughtException', function (err) {
    log(chalk.yellow(err.stack));
    log(chalk.red("NODE CRASHED: exiting"));
    process.exit(1);
  });
}
module.exports=server;
